{"version":3,"sources":["services/bookService.js","utils/types.js","actions/notificationActions.js","actions/bookActions.js","components/BookForm.js","components/BookList.js","components/Notification.js","App.js","reducers/bookReducer.js","reducers/notificationReducer.js","store.js","index.js"],"names":["baseUrl","getAll","a","axios","get","res","data","createBook","newBook","post","updateBook","id","updatedBookObject","put","deleteBook","delete","FETCH_BOOKS","NEW_BOOK","UPDATE_BOOK","DELETE_BOOK","SET_CURRENT_BOOK","RESET_CURRENT_BOOK","FETCH_NOTIFICATION","SET_NOTIFICATION","REMOVE_NOTIFICATION","setNotification","notification","type","removeNotification","setCurrentBook","book","dispatch","resetCurrentBook","BookForm","currentBook","useSelector","state","useDispatch","useState","error","setError","theme","useTheme","matches","useMediaQuery","breakpoints","down","validateForm","isBookFormValid","title","author","Grid","item","xs","p","Box","component","sx","m","width","noValidate","autoComplete","TextField","required","label","value","onChange","e","target","size","helperText","name","multiline","minRows","description","Stack","direction","spacing","mt","Button","variant","color","onClick","bookService","createdBook","message","success","setTimeout","console","log","disabled","_id","bookId","updatedBook","BookList","selectedIndex","setSelectedIndex","books","useEffect","className","style","textAlign","marginBottom","bgcolor","border","borderRadius","List","map","ListItemButton","selected","index","handleListItemClick","ListItemText","primary","secondary","successStyles","background","errorStyles","Notification","container","App","marginLeft","initialBook","initialState","bookReducer","action","b","filter","notificationReducer","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f50541d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/books'\n\n/**\n * @function\n * @desc Fetches all book objects\n * @returns array of books\n */\nconst getAll = async () => {\n  const res = await axios.get(baseUrl)\n  return res.data\n}\n\n/**\n * @function\n * @desc Creates a new book object\n * @param {Object} newBook\n * @returns created book object\n */\nconst createBook = async (newBook) => {\n  const res = await axios.post(baseUrl, newBook)\n  return res.data\n}\n\n/**\n * @function\n * @desc Updates book object by it's id\n * @param {String} id - book id to be updated\n * @param {Object} updatedBookObject\n * @returns the updated book object\n */\nconst updateBook = async (id, updatedBookObject) => {\n  const res = await axios.put(`${baseUrl}/${id}`, updatedBookObject)\n  return res.data\n}\n\n/**\n * @function\n * @desc Deletes book object by it's id\n * @param {String} id - book id to be deleted\n * @returns status of 204 - No content\n */\nconst deleteBook = async (id) => {\n  const res = await axios.delete(`${baseUrl}/${id}`)\n  return res.data\n}\n\nexport default {\n  getAll,\n  createBook,\n  updateBook,\n  deleteBook,\n}\n","// Book action types\nexport const FETCH_BOOKS = 'FETCH_BOOKS'\nexport const NEW_BOOK = 'NEW_BOOK'\nexport const UPDATE_BOOK = 'UPDATE_BOOK'\nexport const DELETE_BOOK = 'DELETE_BOOK'\nexport const SET_CURRENT_BOOK = 'SET_CURRENT_BOOK'\nexport const RESET_CURRENT_BOOK = 'RESET_CURRENT_BOOK'\n\n// Notification action types\nexport const FETCH_NOTIFICATION = 'FETCH_NOTIFICATION'\nexport const SET_NOTIFICATION = 'SET_NOTIFICATION'\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION'\n","/**\n * @module actions/notificationActions\n * @desc Redux notification actions.\n */\nimport {\n  FETCH_NOTIFICATION,\n  SET_NOTIFICATION,\n  REMOVE_NOTIFICATION,\n} from '../utils/types'\n\n/**\n * @function\n * @desc Fetches notification object.\n */\nexport const fetchNotification = () => {\n  return { type: FETCH_NOTIFICATION }\n}\n\n/**\n * @function\n * @desc Sets notification object with a new value.\n */\nexport const setNotification = (notification) => {\n  return { type: SET_NOTIFICATION, data: notification }\n}\n\n/**\n * @function\n * @desc Resets the notification object to the initial value.\n */\nexport const removeNotification = () => {\n  return { type: REMOVE_NOTIFICATION }\n}\n","/**\n * @module actions/bookActions\n * @desc Redux book actions\n */\nimport bookService from '../services/bookService'\nimport {\n  FETCH_BOOKS,\n  NEW_BOOK,\n  UPDATE_BOOK,\n  DELETE_BOOK,\n  SET_CURRENT_BOOK,\n  RESET_CURRENT_BOOK,\n} from '../utils/types'\nimport { removeNotification, setNotification } from './notificationActions'\n\n/**\n * @function\n * @desc Fetches all the books.\n */\nexport const fetchBooks = () => async (dispatch) => {\n  try {\n    const books = await bookService.getAll()\n    dispatch({\n      type: FETCH_BOOKS,\n      data: books,\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n/**\n * @function\n * @desc Sets current book.\n * @param {Object} book\n */\nexport const setCurrentBook = (book) => (dispatch) => {\n  dispatch({ type: SET_CURRENT_BOOK, data: book })\n}\n\n/**\n * @function\n * @desc Resets current book to the initial book state.\n */\nexport const resetCurrentBook = () => async (dispatch) => {\n  dispatch({ type: RESET_CURRENT_BOOK })\n}\n\n/**\n * @function\n * @desc Creates a new book.\n * @param {Object} book\n */\nexport const createBook = (book) => async (dispatch) => {\n  try {\n    const createdBook = await bookService.createBook(book)\n    dispatch({ type: NEW_BOOK, data: createdBook })\n\n    const message = `Book with title '${createdBook.title} added ssuccessfully!`\n    dispatch(setNotification({ message: message, success: true, error: false }))\n    setTimeout(async () => {\n      await dispatch(removeNotification())\n    }, 5000)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n/**\n * @function\n * @desc Updates a book by it's id.\n * @param {String} bookId\n * @param {Object} book\n */\nexport const updateBook = (bookId, book) => async (dispatch) => {\n  try {\n    const updatedBook = await bookService.updateBook(bookId, book)\n    dispatch({ type: UPDATE_BOOK, data: updatedBook })\n\n    const message = `Book with title '${updatedBook.title}' updated successfully!`\n    dispatch(setNotification({ message: message, success: true, error: false }))\n    setTimeout(async () => {\n      await dispatch(removeNotification())\n    }, 5000)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n/**\n * @function\n * @desc Deletes a book by it's id.\n * @param {String} bookId\n */\nexport const deleteBook = (bookId) => async (dispatch) => {\n  try {\n    await bookService.deleteBook(bookId)\n    dispatch({ type: DELETE_BOOK, data: bookId })\n\n    const message = 'Book deleted successfully!'\n    dispatch(setNotification({ message: message, success: true, error: false }))\n    setTimeout(async () => {\n      await dispatch(removeNotification())\n    }, 5000)\n  } catch (error) {\n    console.log(error)\n  }\n}\n","import React, { useState } from 'react'\nimport Box from '@mui/material/Box'\nimport TextField from '@mui/material/TextField'\nimport { Button, Stack } from '@mui/material'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  createBook,\n  setCurrentBook,\n  deleteBook,\n  resetCurrentBook,\n  updateBook,\n} from 'actions/bookActions'\nimport { Grid, useTheme, useMediaQuery } from '@mui/material'\n\n/**\n * @component\n * @desc Renders book form which can be used to create a new\n * book or to edit one from the book list.\n */\nconst BookForm = () => {\n  const currentBook = useSelector((state) => state.book.currentBook)\n\n  const dispatch = useDispatch()\n  const [error, setError] = useState(false)\n\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.down('md'))\n\n  // Used to save a new book\n  const handleSaveNewButton = () => {\n    if (validateForm()) {\n      dispatch(createBook(currentBook))\n      dispatch(resetCurrentBook())\n    }\n  }\n\n  // Used to update a book by it's id\n  const handleSaveButton = () => {\n    if (currentBook._id && validateForm()) {\n      dispatch(updateBook(currentBook._id, currentBook))\n      dispatch(resetCurrentBook())\n    }\n  }\n\n  // Used to delete a book by it's id\n  const handleDeleteButton = () => {\n    if (currentBook._id) {\n      dispatch(deleteBook(currentBook._id))\n      dispatch(resetCurrentBook())\n    }\n  }\n\n  // Used to reset the input fields\n  const handleResetButton = () => {\n    dispatch(resetCurrentBook())\n  }\n\n  const validateForm = () => {\n    let isBookFormValid = true\n\n    if (!currentBook.title) {\n      isBookFormValid = false\n      setError(true)\n    }\n\n    if (!currentBook.author) {\n      isBookFormValid = false\n      setError(true)\n    }\n\n    return isBookFormValid\n  }\n\n  return (\n    <Grid item xs={matches ? 12 : 6} p={1}>\n      <h3>Create new book or edit one from book list</h3>\n\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: '10px auto 10px auto', width: '100%' },\n          '& .MuiButton-root': {},\n          '& .textarea': { m: '10px auto 10px auto', width: '100%' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n        /*ml={1}*/\n      >\n        <div>\n          <TextField\n            required\n            error={error && !currentBook.title}\n            label=\"Title\"\n            id=\"outlined-size-small\"\n            value={currentBook.title || ''}\n            onChange={(e) => {\n              setError(false)\n              dispatch(\n                setCurrentBook({ ...currentBook, title: e.target.value })\n              )\n            }}\n            size=\"small\"\n            helperText={error && !currentBook.title ? 'Title is required' : ''}\n          />\n        </div>\n        <div>\n          <TextField\n            required\n            error={error && !currentBook.author}\n            label=\"Author\"\n            id=\"outlined-size-small\"\n            name=\"author\"\n            value={currentBook.author || ''}\n            onChange={(e) => {\n              setError(false)\n              dispatch(\n                setCurrentBook({ ...currentBook, author: e.target.value })\n              )\n            }}\n            size=\"small\"\n            helperText={\n              error && !currentBook.author ? 'Author is required' : ''\n            }\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Description\"\n            id=\"outlined-size-small\"\n            name=\"description\"\n            multiline\n            minRows={3}\n            value={currentBook.description || ''}\n            onChange={(e) =>\n              dispatch(\n                setCurrentBook({ ...currentBook, description: e.target.value })\n              )\n            }\n            size=\"small\"\n          />\n        </div>\n        <div>\n          <Stack direction=\"row\" spacing={1} mt={1}>\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              onClick={handleSaveNewButton}\n              disabled={currentBook._id ? true : false}\n            >\n              Save new\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={handleSaveButton}\n              disabled={currentBook._id ? false : true}\n            >\n              Save\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"error\"\n              onClick={handleDeleteButton}\n              disabled={currentBook._id ? false : true}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={handleResetButton}\n              disabled={currentBook._id ? false : true}\n            >\n              Reset fields\n            </Button>\n          </Stack>\n        </div>\n      </Box>\n    </Grid>\n  )\n}\nexport default BookForm\n","import React, { useEffect, useState } from 'react'\nimport Box from '@mui/material/Box'\nimport List from '@mui/material/List'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemText from '@mui/material/ListItemText'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchBooks, setCurrentBook } from 'actions/bookActions'\nimport { Grid, useTheme, useMediaQuery } from '@mui/material'\n\n/**\n * @component\n * @desc Renders the book list which consists of the added\n * books by the user.\n */\nconst BookList = () => {\n  const [selectedIndex, setSelectedIndex] = useState(null)\n  const books = useSelector((state) => state.book.books)\n\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.down('md'))\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchBooks())\n  }, [dispatch])\n\n  const handleListItemClick = (index, book) => {\n    setSelectedIndex(index)\n    dispatch(setCurrentBook(book))\n  }\n\n  return (\n    <Grid className=\"gridItem\" item xs={matches ? 12 : 6} p={1}>\n      <h3 style={{ textAlign: 'center', marginBottom: 27 }}>Book list</h3>\n      <Box\n        sx={{\n          width: '100%',\n          bgcolor: 'background.paper',\n          border: '1px solid #E0E0E0',\n          borderRadius: '5px',\n        }}\n      >\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n          {books &&\n            books.map((book) => (\n              <ListItemButton\n                key={book._id}\n                selected={selectedIndex === book._id}\n                onClick={() => handleListItemClick(book._id, book)}\n              >\n                <ListItemText style={{ width: '50%' }} primary={book.title} />\n                <ListItemText\n                  style={{ width: '50%' }}\n                  secondary={book.author}\n                />\n              </ListItemButton>\n            ))}\n        </List>\n      </Box>\n    </Grid>\n  )\n}\n\nexport default BookList\n","import { Box, Grid, useMediaQuery, useTheme } from '@mui/material'\nimport React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchNotification } from '../actions/notificationActions'\n\n/**\n * @component\n * @desc Renders the notification component which use to inform the user\n * about successful or error operations.\n */\nconst Notification = () => {\n  const notification = useSelector((state) => state.notification)\n  const dispatch = useDispatch()\n\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.down('md'))\n\n  useEffect(() => {\n    dispatch(fetchNotification())\n  }, [dispatch])\n\n  return (\n    <Grid container p={1}>\n      {notification.message && (\n        <Grid item xs={matches ? 12 : 6} p={1}>\n          <Box\n            p={1.3}\n            style={notification.success ? successStyles : errorStyles}\n          >\n            {notification.message}\n          </Box>\n        </Grid>\n      )}\n    </Grid>\n  )\n}\n\nconst successStyles = {\n  color: 'green',\n  border: '1px solid green',\n  background: '#DEF1DD',\n  borderRadius: 5,\n}\n\nconst errorStyles = {\n  color: '#731C23',\n  border: '1px solid #731C23',\n  background: '#F8D7D9',\n  borderRadius: 5,\n}\n\nexport default Notification\n","import BookForm from 'components/BookForm'\nimport React from 'react'\nimport BookList from './components/BookList'\nimport Grid from '@mui/material/Grid'\nimport Box from '@mui/material/Box'\nimport Notification from 'components/Notification'\n\nconst App = () => {\n  return (\n    <Box sx={{ width: '100%' }}>\n      <h1 style={{ marginLeft: 16 }}>Books App</h1>\n      <Notification />\n      <Grid container p={1}>\n        <BookForm />\n        <BookList />\n      </Grid>\n    </Box>\n  )\n}\n\nexport default App\n","import {\n  FETCH_BOOKS,\n  NEW_BOOK,\n  UPDATE_BOOK,\n  DELETE_BOOK,\n  SET_CURRENT_BOOK,\n  RESET_CURRENT_BOOK,\n} from '../utils/types'\n\nconst initialBook = {\n  title: '',\n  author: '',\n  description: '',\n}\n\nconst initialState = {\n  currentBook: initialBook,\n  books: [],\n}\n/**\n * @desc bookReducer that controls book state\n * @param {Object} state\n * @param {Object} action\n * @returns state\n */\nconst bookReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_BOOKS:\n      return {\n        ...state,\n        books: action.data,\n      }\n    case NEW_BOOK:\n      return {\n        ...state,\n        books: [...state.books, action.data],\n      }\n    case UPDATE_BOOK:\n      return {\n        ...state,\n        books: state.books.map((b) =>\n          b._id !== action.data._id ? b : action.data\n        ),\n      }\n    case DELETE_BOOK:\n      return {\n        ...state,\n        books: state.books.filter((b) => b._id !== action.data),\n      }\n    case SET_CURRENT_BOOK:\n      return {\n        ...state,\n        currentBook: action.data,\n      }\n    case RESET_CURRENT_BOOK:\n      return {\n        ...state,\n        currentBook: initialBook,\n      }\n    default:\n      return state\n  }\n}\n\nexport default bookReducer\n","import {\n  FETCH_NOTIFICATION,\n  SET_NOTIFICATION,\n  REMOVE_NOTIFICATION,\n} from '../utils/types'\n\nconst initialState = {\n  message: '',\n  success: false,\n  error: false,\n}\n\n/**\n * @desc notificationReducer that controls notification state\n * @param {Object} state\n * @param {Object} action\n * @returns state\n */\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_NOTIFICATION:\n      return state\n    case SET_NOTIFICATION:\n      return action.data\n    case REMOVE_NOTIFICATION:\n      return (state = initialState)\n    default:\n      return state\n  }\n}\n\nexport default notificationReducer\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport bookReducer from './reducers/bookReducer'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport notificationReducer from 'reducers/notificationReducer'\n\nconst reducer = combineReducers({\n  book: bookReducer,\n  notification: notificationReducer,\n})\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}